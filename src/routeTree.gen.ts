/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ForumRouteImport } from './routes/_forum'
import { Route as authVerifyRouteImport } from './routes/(auth)/verify'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { Route as ForumForumIndexRouteImport } from './routes/_forum/forum/index'
import { Route as ForumForumProfileAuthorIdRouteImport } from './routes/_forum/forum/profile/$authorId'
import { Route as ForumForumPostsCreateRouteImport } from './routes/_forum/forum/posts/create'
import { Route as ForumForumPostsPostIdRouteImport } from './routes/_forum/forum/posts/$postId'
import { Route as ForumForumPostsPostIdEditRouteImport } from './routes/_forum/forum/posts/$postId_.edit'

const IndexLazyRouteImport = createFileRoute('/')()

const ForumRoute = ForumRouteImport.update({
  id: '/_forum',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const authVerifyRoute = authVerifyRouteImport.update({
  id: '/(auth)/verify',
  path: '/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const ForumForumIndexRoute = ForumForumIndexRouteImport.update({
  id: '/forum/',
  path: '/forum/',
  getParentRoute: () => ForumRoute,
} as any)
const ForumForumProfileAuthorIdRoute =
  ForumForumProfileAuthorIdRouteImport.update({
    id: '/forum/profile/$authorId',
    path: '/forum/profile/$authorId',
    getParentRoute: () => ForumRoute,
  } as any)
const ForumForumPostsCreateRoute = ForumForumPostsCreateRouteImport.update({
  id: '/forum/posts/create',
  path: '/forum/posts/create',
  getParentRoute: () => ForumRoute,
} as any)
const ForumForumPostsPostIdRoute = ForumForumPostsPostIdRouteImport.update({
  id: '/forum/posts/$postId',
  path: '/forum/posts/$postId',
  getParentRoute: () => ForumRoute,
} as any)
const ForumForumPostsPostIdEditRoute =
  ForumForumPostsPostIdEditRouteImport.update({
    id: '/forum/posts/$postId_/edit',
    path: '/forum/posts/$postId/edit',
    getParentRoute: () => ForumRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/verify': typeof authVerifyRoute
  '/forum': typeof ForumForumIndexRoute
  '/forum/posts/$postId': typeof ForumForumPostsPostIdRoute
  '/forum/posts/create': typeof ForumForumPostsCreateRoute
  '/forum/profile/$authorId': typeof ForumForumProfileAuthorIdRoute
  '/forum/posts/$postId/edit': typeof ForumForumPostsPostIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/verify': typeof authVerifyRoute
  '/forum': typeof ForumForumIndexRoute
  '/forum/posts/$postId': typeof ForumForumPostsPostIdRoute
  '/forum/posts/create': typeof ForumForumPostsCreateRoute
  '/forum/profile/$authorId': typeof ForumForumProfileAuthorIdRoute
  '/forum/posts/$postId/edit': typeof ForumForumPostsPostIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/_forum': typeof ForumRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(auth)/verify': typeof authVerifyRoute
  '/_forum/forum/': typeof ForumForumIndexRoute
  '/_forum/forum/posts/$postId': typeof ForumForumPostsPostIdRoute
  '/_forum/forum/posts/create': typeof ForumForumPostsCreateRoute
  '/_forum/forum/profile/$authorId': typeof ForumForumProfileAuthorIdRoute
  '/_forum/forum/posts/$postId_/edit': typeof ForumForumPostsPostIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/verify'
    | '/forum'
    | '/forum/posts/$postId'
    | '/forum/posts/create'
    | '/forum/profile/$authorId'
    | '/forum/posts/$postId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/verify'
    | '/forum'
    | '/forum/posts/$postId'
    | '/forum/posts/create'
    | '/forum/profile/$authorId'
    | '/forum/posts/$postId/edit'
  id:
    | '__root__'
    | '/'
    | '/_forum'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(auth)/verify'
    | '/_forum/forum/'
    | '/_forum/forum/posts/$postId'
    | '/_forum/forum/posts/create'
    | '/_forum/forum/profile/$authorId'
    | '/_forum/forum/posts/$postId_/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ForumRoute: typeof ForumRouteWithChildren
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
  authVerifyRoute: typeof authVerifyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_forum': {
      id: '/_forum'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ForumRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/verify': {
      id: '/(auth)/verify'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof authVerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_forum/forum/': {
      id: '/_forum/forum/'
      path: '/forum'
      fullPath: '/forum'
      preLoaderRoute: typeof ForumForumIndexRouteImport
      parentRoute: typeof ForumRoute
    }
    '/_forum/forum/profile/$authorId': {
      id: '/_forum/forum/profile/$authorId'
      path: '/forum/profile/$authorId'
      fullPath: '/forum/profile/$authorId'
      preLoaderRoute: typeof ForumForumProfileAuthorIdRouteImport
      parentRoute: typeof ForumRoute
    }
    '/_forum/forum/posts/create': {
      id: '/_forum/forum/posts/create'
      path: '/forum/posts/create'
      fullPath: '/forum/posts/create'
      preLoaderRoute: typeof ForumForumPostsCreateRouteImport
      parentRoute: typeof ForumRoute
    }
    '/_forum/forum/posts/$postId': {
      id: '/_forum/forum/posts/$postId'
      path: '/forum/posts/$postId'
      fullPath: '/forum/posts/$postId'
      preLoaderRoute: typeof ForumForumPostsPostIdRouteImport
      parentRoute: typeof ForumRoute
    }
    '/_forum/forum/posts/$postId_/edit': {
      id: '/_forum/forum/posts/$postId_/edit'
      path: '/forum/posts/$postId/edit'
      fullPath: '/forum/posts/$postId/edit'
      preLoaderRoute: typeof ForumForumPostsPostIdEditRouteImport
      parentRoute: typeof ForumRoute
    }
  }
}

interface ForumRouteChildren {
  ForumForumIndexRoute: typeof ForumForumIndexRoute
  ForumForumPostsPostIdRoute: typeof ForumForumPostsPostIdRoute
  ForumForumPostsCreateRoute: typeof ForumForumPostsCreateRoute
  ForumForumProfileAuthorIdRoute: typeof ForumForumProfileAuthorIdRoute
  ForumForumPostsPostIdEditRoute: typeof ForumForumPostsPostIdEditRoute
}

const ForumRouteChildren: ForumRouteChildren = {
  ForumForumIndexRoute: ForumForumIndexRoute,
  ForumForumPostsPostIdRoute: ForumForumPostsPostIdRoute,
  ForumForumPostsCreateRoute: ForumForumPostsCreateRoute,
  ForumForumProfileAuthorIdRoute: ForumForumProfileAuthorIdRoute,
  ForumForumPostsPostIdEditRoute: ForumForumPostsPostIdEditRoute,
}

const ForumRouteWithChildren = ForumRoute._addFileChildren(ForumRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ForumRoute: ForumRouteWithChildren,
  authForgotPasswordRoute: authForgotPasswordRoute,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
  authVerifyRoute: authVerifyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
